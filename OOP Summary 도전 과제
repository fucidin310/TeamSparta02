#include <iostream>
#include <stdint.h>
using namespace std;

class Animal {
public:
	virtual void makeSound() = 0;

	Animal() {
		cout << "Animal 기본 생성자 호출!" << endl;
	}
	virtual ~Animal() {
		cout << "Animal 소멸자 호출!" << endl;
	}
};

class Dog : public Animal {
public:
	virtual void makeSound() {
		cout << "Dog : 멍멍!" << endl;
	}

	Dog() {
		cout << "Dog 기본 생성자 호출!" << endl;
	}
	~Dog() {
		cout << "Dog 소멸자 호출!" << endl;
	}
};

class Cat : public Animal {
public:
	virtual void makeSound() {
		cout << "Cat : 야옹~" << endl;
	}

	Cat() {
		cout << "Cat 기본 생성자 호출!" << endl;
	}
	~Cat() {
		cout << "Cat 소멸자 호출!" << endl;
	}

};

class Cow : public Animal {
public:
	virtual void makeSound() {
		cout << "Cow : 음머~" << endl;
	}

	Cow() {
		cout << "Cow 기본 생성자 호출!" << endl;
	}
	~Cow() {
		cout << "Cow 소멸자 호출!" << endl;
	}
};

class Zoo {
	Animal* animals[10] = {};
	int animalCount = 0;

public:
	void AddAnimal(Animal* animal) {
		if (animalCount >= 10) {
			cout << "Error : 동물원에 동물이 가득 차 있습니다." << endl;
			return;
		}
		else {
			animals[animalCount] = animal;
			animalCount++;
		}
	}

	void PerformActions() {
		for (int i = 0; i < animalCount; i++) {
			animals[i]->makeSound();
		}
	}

	Zoo() {
		cout << "Zoo 기본 생성자 호출!" << endl;
	}
	~Zoo() {
		for (int i = 0; i < animalCount; i++) {
			delete animals[i];
		}
		cout << "Zoo 소멸자 호출!" << endl;
	}
};

Animal* CreateRandomAnimal() {
	int temp = rand() % 3;

	switch (temp)
	{
	case 0: return new Dog();
	case 1: return new Cat();
	case 2: return new Cow();
	default: return nullptr;
	}
};

int main() {
	Zoo* zoo = new Zoo();

	for (int i = 0; i < 10; i++) {
		zoo->AddAnimal(CreateRandomAnimal());
	}

	zoo->AddAnimal(CreateRandomAnimal());

	zoo->PerformActions();

	delete zoo;
}
